{"version":3,"sources":["webpack:///./node_modules/howler/dist/howler.js"],"names":["HowlerGlobal","this","init","prototype","self","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","window","navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","volume","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","i","length","_webAudio","ids","_getSoundIds","j","sound","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","replace","state","_autoSuspend","Audio","oncanplaythrough","e","_setupCodecs","audioTest","err","canPlayType","mpegTest","checkOpera","userAgent","match","isOldOpera","parseInt","split","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","document","removeEventListener","_emit","addEventListener","_obtainHtml5Audio","pop","testPlay","play","Promise","then","catch","console","warn","audio","push","suspend","_sounds","_paused","_suspendTimer","clearTimeout","setTimeout","handleSuspension","_resumeAfterSuspend","Howl","o","src","error","_autoplay","autoplay","_format","format","_html5","html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","undefined","_xhr","method","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","action","url","str","exec","toLowerCase","location","protocol","slice","Sound","loadBuffer","internal","id","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","Math","max","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","bind","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","arguments","_clearSound","_interval","args","index","indexOf","apply","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","Date","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","realTime","rateSeek","seekAndEmit","emitSeek","sounds","_errorFn","_loadFn","_endFn","splice","remCache","cache","on","events","off","isId","keys","Object","Array","isArray","msg","call","task","shift","ended","_drain","reset","limit","cnt","_panner","isIOS","vendor","test","howl","_parent","parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","code","ceil","__default","loadSound","data","atob","dataView","Uint8Array","charCodeAt","decodeAudioData","XMLHttpRequest","open","responseType","forEach","key","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","platform","appVersion","version","safari","exports","global","_super","_pos","_orientation","stereo","pan","pos","x","y","z","positionX","setTargetAtTime","positionY","positionZ","setPosition","orientation","xUp","yUp","zUp","or","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","_stereo","_pannerAttr","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","_onstereo","onstereo","_onpos","onpos","_onorientation","onorientation","pannerType","createStereoPanner","setupPanner","orientationX","orientationY","orientationZ","pannerAttr","_coneInnerAngle","_coneOuterAngle","_coneOuterGain","_distanceModel","_maxDistance","_refDistance","_rolloffFactor","_panningModel","pa","panner","type","createPanner"],"mappings":"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","file":"7-7ff2ce7a8e4918946151.js","sourcesContent":["/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n(function () {\n  'use strict';\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n\n  var HowlerGlobal = function HowlerGlobal() {\n    this.init();\n  };\n\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function init() {\n      var self = this || Howler; // Create a global ID counter.\n\n      self._counter = 1000; // Pool of unlocked HTML5 Audio objects.\n\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10; // Internal properties.\n\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = typeof window !== 'undefined' && window.navigator ? window.navigator : null; // Public properties.\n\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null; // Set to false to disable the auto audio unlocker.\n\n      self.autoUnlock = true; // Setup the various state values for global tracking.\n\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function volume(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol); // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol; // Don't update any of the nodes if we are muted.\n\n        if (self._muted) {\n          return self;\n        } // When using Web Audio, we just need to adjust the master gain.\n\n\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        } // Loop through and change volume for all HTML5 audio nodes.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and change the volumes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function mute(muted) {\n      var self = this || Howler; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted; // With Web Audio, we just need to mute the master gain.\n\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      } // Loop through and mute all HTML5 Audio nodes.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and mark the audio node as muted.\n\n\n          for (var j = 0; j < ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = muted ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function stop() {\n      var self = this || Howler; // Loop through all Howls and stop them.\n\n      for (var i = 0; i < self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function unload() {\n      var self = this || Howler;\n\n      for (var i = self._howls.length - 1; i >= 0; i--) {\n        self._howls[i].unload();\n      } // Create a new AudioContext to make sure it is fully reset.\n\n\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function codecs(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function _setup() {\n      var self = this || Howler; // Keeps track of the suspend/resume state of the AudioContext.\n\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended'; // Automatically begin the 30-second suspend process\n\n      self._autoSuspend(); // Check if audio is available.\n\n\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio(); // Check if the canplaythrough event is available.\n\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch (e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      } // Test to make sure audio isn't disabled in Internet Explorer.\n\n\n      try {\n        var test = new Audio();\n\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {} // Check for supported codecs.\n\n\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function _setupCodecs() {\n      var self = this || Howler;\n      var audioTest = null; // Must wrap in a try/catch because IE11 in server mode throws an error.\n\n      try {\n        audioTest = typeof Audio !== 'undefined' ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''); // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n\n      var isOldOpera = checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33;\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function _unlockAudio() {\n      var self = this || Howler; // Only run this if Web Audio is supported and it hasn't already been unlocked.\n\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false; // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      } // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n\n\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050); // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n\n      var unlock = function unlock(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio(); // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n\n            audioNode._unlocked = true; // Add the audio node to the pool.\n\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        } // Loop through any assigned audio nodes and unlock them.\n\n\n        for (var i = 0; i < self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds(); // Loop through all sounds and unlock the audio nodes.\n\n\n            for (var j = 0; j < ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n\n                sound._node.load();\n              }\n            }\n          }\n        } // Fix Android can not play in suspend state.\n\n\n        self._autoResume(); // Create an empty buffer.\n\n\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination); // Play the empty buffer.\n\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        } // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n\n\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        } // Setup a timeout to check that we are unlocked on the next event loop.\n\n\n        source.onended = function () {\n          source.disconnect(0); // Update the unlocked state and prevent this check from happening again.\n\n          self._audioUnlocked = true; // Remove the touch start listener.\n\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true); // Let all sounds know that audio has been unlocked.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      }; // Setup a touch start listener to attempt an unlock in.\n\n\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function _obtainHtml5Audio() {\n      var self = this || Howler; // Return the next object from the pool if one exists.\n\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      } //.Check if the audio is locked and throw a warning.\n\n\n      var testPlay = new Audio().play();\n\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function () {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function _releaseHtml5Audio(audio) {\n      var self = this || Howler; // Don't add audio to the pool if we don't know if it has been unlocked.\n\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function _autoSuspend() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      } // Check if any sounds are playing.\n\n\n      for (var i = 0; i < self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j = 0; j < self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      } // If no sound has played after 30 seconds, suspend the context.\n\n\n      self._suspendTimer = setTimeout(function () {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending'; // Handle updating the state of the audio context after suspending.\n\n        var handleSuspension = function handleSuspension() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n\n            self._autoResume();\n          }\n        }; // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n\n\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function _autoResume() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function () {\n          self.state = 'running'; // Emit to all Howls that the audio has resumed.\n\n          for (var i = 0; i < self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  }; // Setup the global audio controller.\n\n  var Howler = new HowlerGlobal();\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n\n  var Howl = function Howl(o) {\n    var self = this; // Throw an error if no source is provided.\n\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function init(o) {\n      var self = this; // If we don't have an AudioContext created yet, run the setup.\n\n      if (!Howler.ctx) {\n        setupAudioContext();\n      } // Setup user-defined default properties.\n\n\n      self._autoplay = o.autoplay || false;\n      self._format = typeof o.format !== 'string' ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = typeof o.preload === 'boolean' || o.preload === 'metadata' ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = typeof o.src !== 'string' ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n      }; // Setup all other default properties.\n\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false; // Setup event listeners.\n\n      self._onend = o.onend ? [{\n        fn: o.onend\n      }] : [];\n      self._onfade = o.onfade ? [{\n        fn: o.onfade\n      }] : [];\n      self._onload = o.onload ? [{\n        fn: o.onload\n      }] : [];\n      self._onloaderror = o.onloaderror ? [{\n        fn: o.onloaderror\n      }] : [];\n      self._onplayerror = o.onplayerror ? [{\n        fn: o.onplayerror\n      }] : [];\n      self._onpause = o.onpause ? [{\n        fn: o.onpause\n      }] : [];\n      self._onplay = o.onplay ? [{\n        fn: o.onplay\n      }] : [];\n      self._onstop = o.onstop ? [{\n        fn: o.onstop\n      }] : [];\n      self._onmute = o.onmute ? [{\n        fn: o.onmute\n      }] : [];\n      self._onvolume = o.onvolume ? [{\n        fn: o.onvolume\n      }] : [];\n      self._onrate = o.onrate ? [{\n        fn: o.onrate\n      }] : [];\n      self._onseek = o.onseek ? [{\n        fn: o.onseek\n      }] : [];\n      self._onunlock = o.onunlock ? [{\n        fn: o.onunlock\n      }] : [];\n      self._onresume = []; // Web Audio or HTML5 Audio?\n\n      self._webAudio = Howler.usingWebAudio && !self._html5; // Automatically try to enable audio.\n\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      } // Keep track of this Howl group in the global controller.\n\n\n      Howler._howls.push(self); // If they selected autoplay, add a play event to the load queue.\n\n\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play();\n          }\n        });\n      } // Load the source file unless otherwise specified.\n\n\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function load() {\n      var self = this;\n      var url = null; // If no audio is available, quit immediately.\n\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n\n        return;\n      } // Make sure our source is in an array.\n\n\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      } // Loop through the sources and pick the first one that is compatible.\n\n\n      for (var i = 0; i < self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n\n            continue;\n          } // Extract the file extension from the URL or base64 data URI.\n\n\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        } // Log a warning if no extension was found.\n\n\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        } // Check if this extension is available.\n\n\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading'; // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      } // Create a new sound object and add it to the pool.\n\n\n      new Sound(self); // Load and decode the audio data for playback.\n\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function play(sprite, internal) {\n      var self = this;\n      var id = null; // Determine if a sprite, sound id or nothing was passed\n\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default'; // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n\n        if (!self._playLock) {\n          var num = 0;\n\n          for (var i = 0; i < self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      } // Get the selected node, or get one from the pool.\n\n\n      var sound = id ? self._soundById(id) : self._inactiveSound(); // If the sound doesn't exist, do nothing.\n\n      if (!sound) {\n        return null;\n      } // Select the sprite definition.\n\n\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      } // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n\n\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite; // Mark this sound as not ended in case another sound is played before this one loads.\n\n        sound._ended = false; // Add the sound to the queue to be played on load.\n\n        var soundId = sound._id;\n\n        self._queue.push({\n          event: 'play',\n          action: function action() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      } // Don't play the sound if an id was passed and it is already playing.\n\n\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      } // Make sure the AudioContext isn't suspended, and resume it if it is.\n\n\n      if (self._webAudio) {\n        Howler._autoResume();\n      } // Determine how long to play for and where to start playing.\n\n\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n      var timeout = duration * 1000 / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite; // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n\n      sound._ended = false; // Update the parameters of the sound.\n\n      var setParams = function setParams() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      }; // End the sound instantly if seek is at the end.\n\n\n      if (seek >= stop) {\n        self._ended(sound);\n\n        return;\n      } // Begin the actual playback.\n\n\n      var node = sound._node;\n\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function playWebAudio() {\n          self._playLock = false;\n          setParams();\n\n          self._refreshBuffer(sound); // Setup the playback params.\n\n\n          var vol = sound._muted || self._muted ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime; // Play the sound using the supported method.\n\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          } // Start a new timer if none is present.\n\n\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function () {\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true; // Wait for the audio context to resume before playing.\n\n          self.once('resume', playWebAudio); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function playHtml5() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate; // Some browsers will throw an error if this is called without user interaction.\n\n          try {\n            var play = node.play(); // Support older browsers that don't support promises, and thus don't have this issue.\n\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true; // Set param values immediately.\n\n              setParams(); // Releases the lock and executes queued actions.\n\n              play.then(function () {\n                self._playLock = false;\n                node._unlocked = true;\n\n                if (!internal) {\n                  self._emit('play', sound._id);\n\n                  self._loadQueue();\n                }\n              }).catch(function () {\n                self._playLock = false;\n\n                self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.'); // Reset the ended and paused values.\n\n\n                sound._ended = true;\n                sound._paused = true;\n              });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n\n              self._emit('play', sound._id);\n\n              self._loadQueue();\n            } // Setting rate before playing won't work in IE, so we set it again here.\n\n\n            node.playbackRate = sound._rate; // If the node is still paused, then we can assume there was a playback issue.\n\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' + 'on mobile devices and Chrome where playback was not within a user interaction.');\n\n              return;\n            } // Setup the end timer on sprites or listen for the ended event.\n\n\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function () {\n                // Fire ended on this audio node.\n                self._ended(sound); // Clear this listener.\n\n\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        }; // If this is streaming audio, make sure the src is set and load again.\n\n\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        } // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n\n\n        var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function listener() {\n            // Begin playback.\n            playHtml5(); // Clear this listener.\n\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n\n          node.addEventListener(Howler._canPlayEvent, listener, false); // Cancel the end timer.\n\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function pause(id) {\n      var self = this; // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function action() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be paused.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              } // Clean up the buffer source.\n\n\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        } // Fire the pause event, unless `true` is passed as the 2nd argument.\n\n\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function stop(id, internal) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to stop when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function action() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      } // If no id is passed, get all ID's to be stopped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]); // Get the sound.\n\n\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true; // Stop currently running fades.\n\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                } // Clean up the buffer source.\n\n\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n\n              sound._node.pause(); // If this is a live stream, stop download once the audio is stopped.\n\n\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function mute(muted, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to mute when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function action() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      } // If applying mute/unmute to all sounds, update the group's value.\n\n\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      } // If no id is passed, get all ID's to be muted.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted; // Cancel active fade and set the volume to the end value.\n\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function volume() {\n      var self = this;\n      var args = arguments;\n      var vol, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the volume or return the current volume.\n\n\n      var sound;\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function action() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group volume.\n\n\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol; // Stop currently running fades.\n\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function fade(from, to, len, id) {\n      var self = this; // If the sound hasn't loaded, add it to the load queue to fade when capable.\n\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function action() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      } // Make sure the to/from/len values are numbers.\n\n\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len); // Set the volume to the start position.\n\n      self.volume(from, id); // Fade the volume of one or all sounds.\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]); // Create a linear fade or fall back to timeouts with HTML5 Audio.\n\n\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          } // If we are using Web Audio, let the native methods do the actual fade.\n\n\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + len / 1000;\n            sound._volume = from;\n\n            sound._node.gain.setValueAtTime(from, currentTime);\n\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function _startFadeInterval(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n      var lastTick = Date.now(); // Store the value being faded to.\n\n      sound._fadeTo = to; // Update the volume value on each interval tick.\n\n      sound._interval = setInterval(function () {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick; // Round to within 2 decimal points.\n\n        vol = Math.round(vol * 100) / 100; // Make sure the volume is in the right bounds.\n\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        } // Change the volume.\n\n\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        } // Set the group's volume.\n\n\n        if (isGroup) {\n          self._volume = vol;\n        } // When the fade is complete, stop it and fire event.\n\n\n        if (to < from && vol <= to || to > from && vol >= to) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function _stopFade(id) {\n      var self = this;\n\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function loop() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound; // Determine the values for loop and id.\n\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      } // If no id is passed, get all ID's to be looped.\n\n\n      var ids = self._getSoundIds(id);\n\n      for (var i = 0; i < ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function rate() {\n      var self = this;\n      var args = arguments;\n      var rate, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // Update the playback rate or return the current value.\n\n\n      var sound;\n\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function action() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        } // Set the group rate.\n\n\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        } // Update one or all volumes.\n\n\n        id = self._getSoundIds(id);\n\n        for (var i = 0; i < id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n\n            sound._rate = rate; // Change the playback rate.\n\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            } // Reset the timers.\n\n\n            var seek = self.seek(id[i]);\n            var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n            var timeout = duration * 1000 / Math.abs(sound._rate); // Start a new end timer if sound is already playing.\n\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function seek() {\n      var self = this;\n      var args = arguments;\n      var seek, id; // Determine the values based on arguments.\n\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n\n        var index = ids.indexOf(args[0]);\n\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      } // If there is no ID, bail out.\n\n\n      if (typeof id === 'undefined') {\n        return self;\n      } // If the sound hasn't loaded, add it to the load queue to seek when capable.\n\n\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function action() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      } // Get the sound.\n\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n\n          if (playing) {\n            self.pause(id, true);\n          } // Move the position of the track and cancel timer.\n\n\n          sound._seek = seek;\n          sound._ended = false;\n\n          self._clearTimer(id); // Update the seek position for HTML5 Audio.\n\n\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          } // Seek and emit when ready.\n\n\n          var seekAndEmit = function seekAndEmit() {\n            self._emit('seek', id); // Restart the playback if the sound was playing.\n\n\n            if (playing) {\n              self.play(id, true);\n            }\n          }; // Wait for the play lock to be unset before emitting (HTML5 Audio).\n\n\n          if (playing && !self._webAudio) {\n            var emitSeek = function emitSeek() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function playing(id) {\n      var self = this; // Check the passed sound ID (if any).\n\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n\n        return sound ? !sound._paused : false;\n      } // Otherwise, loop through all sounds and check if any are playing.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function duration(id) {\n      var self = this;\n      var duration = self._duration; // If we pass an ID, get the sound and return the sprite length.\n\n      var sound = self._soundById(id);\n\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function state() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function unload() {\n      var self = this; // Stop playing any active sounds.\n\n      var sounds = self._sounds;\n\n      for (var i = 0; i < sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        } // Remove the source or disconnect.\n\n\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node); // Remove any event listeners.\n\n\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false); // Release the Audio object back to the pool.\n\n\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        } // Empty out all of the nodes.\n\n\n        delete sounds[i]._node; // Make sure all timers are cleared out.\n\n        self._clearTimer(sounds[i]._id);\n      } // Remove the references in the global Howler object.\n\n\n      var index = Howler._howls.indexOf(self);\n\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      } // Delete this sound from the cache (if no other Howl is using it).\n\n\n      var remCache = true;\n\n      for (i = 0; i < Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      } // Clear global errors.\n\n\n      Howler.noAudio = false; // Clear out `self`.\n\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function on(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {\n          id: id,\n          fn: fn,\n          once: once\n        } : {\n          id: id,\n          fn: fn\n        });\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function off(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0; // Allow passing just an event and ID.\n\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i = 0; i < events.length; i++) {\n          var isId = id === events[i].id;\n\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n\n        for (i = 0; i < keys.length; i++) {\n          if (keys[i].indexOf('_on') === 0 && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function once(event, fn, id) {\n      var self = this; // Setup the event listener.\n\n      self.on(event, fn, id, 1);\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function _emit(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event]; // Loop through event store and fire all functions.\n\n      for (var i = events.length - 1; i >= 0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function (fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0); // If this event was setup with `once`, remove it.\n\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      } // Pass the event type into load queue so that it can continue stepping.\n\n\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function _loadQueue(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0]; // Remove this task if a matching event was passed.\n\n        if (task.event === event) {\n          self._queue.shift();\n\n          self._loadQueue();\n        } // Run the task if no event type is passed.\n\n\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function _ended(sound) {\n      var self = this;\n      var sprite = sound._sprite; // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      } // Should this sound loop?\n\n\n      var loop = !!(sound._loop || self._sprite[sprite][2]); // Fire the ended event.\n\n      self._emit('end', sound._id); // Restart the playback for HTML5 Audio loop.\n\n\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      } // Restart this timer if on a Web Audio loop.\n\n\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n        var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      } // Mark the node as paused.\n\n\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n\n        self._clearTimer(sound._id); // Clean up the buffer source.\n\n\n        self._cleanBuffer(sound._node); // Attempt to auto-suspend AudioContext if no sounds are still playing.\n\n\n        Howler._autoSuspend();\n      } // When using a sprite, end the track.\n\n\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function _clearTimer(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function _soundById(id) {\n      var self = this; // Loop through all sounds and find the one with this ID.\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function _inactiveSound() {\n      var self = this;\n\n      self._drain(); // Find the first inactive node to recycle.\n\n\n      for (var i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      } // If no inactive node was found, create a new one.\n\n\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function _drain() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0; // If there are less sounds than the max pool size, we are done.\n\n      if (self._sounds.length < limit) {\n        return;\n      } // Count the number of inactive sounds.\n\n\n      for (i = 0; i < self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      } // Remove excess inactive sounds, going in reverse order.\n\n\n      for (i = self._sounds.length - 1; i >= 0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          } // Remove sounds until we have the pool size.\n\n\n          self._sounds.splice(i, 1);\n\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function _getSoundIds(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n\n        for (var i = 0; i < self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function _refreshBuffer(sound) {\n      var self = this; // Setup the buffer source for playback.\n\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src]; // Connect to the correct node.\n\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      } // Setup looping and playback rate.\n\n\n      sound._node.bufferSource.loop = sound._loop;\n\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function _cleanBuffer(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n\n        if (isIOS) {\n          try {\n            node.bufferSource.buffer = Howler._scratchBuffer;\n          } catch (e) {}\n        }\n      }\n\n      node.bufferSource = null;\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function _clearSound(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n\n  var Sound = function Sound(howl) {\n    this._parent = howl;\n    this.init();\n  };\n\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function init() {\n      var self = this;\n      var parent = self._parent; // Setup the default parameters.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a unique ID for this sound.\n\n      self._id = ++Howler._counter; // Add itself to the parent's pool.\n\n      parent._sounds.push(self); // Create the new node.\n\n\n      self.create();\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function create() {\n      var self = this;\n      var parent = self._parent;\n      var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n\n        self._node.paused = true;\n\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio(); // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n\n        self._errorFn = self._errorListener.bind(self);\n\n        self._node.addEventListener('error', self._errorFn, false); // Listen for 'canplaythrough' event to let us know the sound is ready.\n\n\n        self._loadFn = self._loadListener.bind(self);\n\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false); // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n\n\n        self._endFn = self._endListener.bind(self);\n\n        self._node.addEventListener('ended', self._endFn, false); // Setup the new audio node.\n\n\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume(); // Begin loading the source.\n\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function reset() {\n      var self = this;\n      var parent = self._parent; // Reset all of the parameters of this sound.\n\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default'; // Generate a new ID so that it isn't confused with the previous sound.\n\n      self._id = ++Howler._counter;\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function _errorListener() {\n      var self = this; // Fire an error event and pass back the code.\n\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0); // Clear the event listener.\n\n\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function _loadListener() {\n      var self = this;\n      var parent = self._parent; // Round up the duration to account for the lower precision in HTML5 Audio.\n\n      parent._duration = Math.ceil(self._node.duration * 10) / 10; // Setup a sprite if none is defined.\n\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {\n          __default: [0, parent._duration * 1000]\n        };\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n\n        parent._emit('load');\n\n        parent._loadQueue();\n      } // Clear the event listener.\n\n\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function _endListener() {\n      var self = this;\n      var parent = self._parent; // Only handle the `ended`` event if the duration is Infinity.\n\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10; // Update the sprite that corresponds to the real duration.\n\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        } // Run the regular ended method.\n\n\n        parent._ended(self);\n      } // Clear the event listener since the duration is now correct.\n\n\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  var cache = {};\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n\n  var loadBuffer = function loadBuffer(self) {\n    var url = self._src; // Check if the buffer has already been cached and use it instead.\n\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration; // Load the sound into this Howl.\n\n      loadSound(self);\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n\n      for (var i = 0; i < data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer'; // Apply any custom headers to the request.\n\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function (key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function () {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n\n      xhr.onerror = function () {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n\n      safeXhrSend(xhr);\n    }\n  };\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n\n\n  var safeXhrSend = function safeXhrSend(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n\n\n  var decodeAudioData = function decodeAudioData(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function error() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    }; // Load the sound on success.\n\n\n    var success = function success(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    }; // Decode the buffer into an audio source.\n\n\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  };\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n\n\n  var loadSound = function loadSound(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    } // Setup a sprite if none is defined.\n\n\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {\n        __default: [0, self._duration * 1000]\n      };\n    } // Fire the loaded event.\n\n\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n\n      self._emit('load');\n\n      self._loadQueue();\n    }\n  };\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n\n\n  var setupAudioContext = function setupAudioContext() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    } // Check if we are using Web Audio and setup the AudioContext if we are.\n\n\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch (e) {\n      Howler.usingWebAudio = false;\n    } // If the audio context creation still failed, set using web audio to false.\n\n\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    } // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n\n\n    var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    } // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n\n\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = typeof Howler.ctx.createGain === 'undefined' ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    } // Re-run the setup on Howler.\n\n\n    Howler._setup();\n  }; // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  } // Add support for CommonJS libraries such as browserify.\n\n\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  } // Add to global in Node.js (for testing, etc).\n\n\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {\n    // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n\n(function () {\n  'use strict'; // Setup default properties.\n\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n  /** Global Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n\n  HowlerGlobal.prototype.stereo = function (pan) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Loop through all Howls and update their stereo panning.\n\n\n    for (var i = self._howls.length - 1; i >= 0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n\n\n  HowlerGlobal.prototype.pos = function (x, y, z) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._pos[1] : y;\n    z = typeof z !== 'number' ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n\n\n  HowlerGlobal.prototype.orientation = function (x, y, z, xUp, yUp, zUp) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    var or = self._orientation;\n    y = typeof y !== 'number' ? or[1] : y;\n    z = typeof z !== 'number' ? or[2] : z;\n    xUp = typeof xUp !== 'number' ? or[3] : xUp;\n    yUp = typeof yUp !== 'number' ? or[4] : yUp;\n    zUp = typeof zUp !== 'number' ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n  /** Group Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n\n\n  Howl.prototype.init = function (_super) {\n    return function (o) {\n      var self = this; // Setup user-defined default properties.\n\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      }; // Setup event listeners.\n\n      self._onstereo = o.onstereo ? [{\n        fn: o.onstereo\n      }] : [];\n      self._onpos = o.onpos ? [{\n        fn: o.onpos\n      }] : [];\n      self._onorientation = o.onorientation ? [{\n        fn: o.onorientation\n      }] : []; // Complete initilization with howler.js core's init function.\n\n      return _super.call(this, o);\n    };\n  }(Howl.prototype.init);\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n\n\n  Howl.prototype.stereo = function (pan, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function action() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    } // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n\n\n    var pannerType = typeof Howler.ctx.createStereoPanner === 'undefined' ? 'spatial' : 'stereo'; // Setup the group's stereo panning if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    } // Change the streo panning of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower'; // Check if there is a panner setup and create a new one if not.\n\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n\n\n  Howl.prototype.pos = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change position when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function action() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? 0 : y;\n    z = typeof z !== 'number' ? -0.5 : z; // Setup the group's spatial position if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    } // Change the spatial position of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n\n\n  Howl.prototype.orientation = function (x, y, z, id) {\n    var self = this; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n\n\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function action() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    } // Set the defaults for optional 'y' & 'z'.\n\n\n    y = typeof y !== 'number' ? self._orientation[1] : y;\n    z = typeof z !== 'number' ? self._orientation[2] : z; // Setup the group's spatial orientation if no ID is passed.\n\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    } // Change the spatial orientation of one or all sounds in group.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n\n\n  Howl.prototype.pannerAttr = function () {\n    var self = this;\n    var args = arguments;\n    var o, id, sound; // Stop right here if not using Web Audio.\n\n    if (!self._webAudio) {\n      return self;\n    } // Determine the values based on arguments.\n\n\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0]; // Set the grou's panner attribute values.\n\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    } // Update the values of the specified sounds.\n\n\n    var ids = self._getSoundIds(id);\n\n    for (var i = 0; i < ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        }; // Update the panner values or create a new panner if none exists.\n\n        var panner = sound._panner;\n\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          } // Create a new panner node.\n\n\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n  /** Single Sound Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.init = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Setup user-defined default properties.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // Complete initilization with howler.js core Sound's init function.\n\n      _super.call(this); // If a stereo or position was specified, set it up.\n\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  }(Sound.prototype.init);\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n\n\n  Sound.prototype.reset = function (_super) {\n    return function () {\n      var self = this;\n      var parent = self._parent; // Reset all spatial plugin properties on this sound.\n\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr; // If a stereo or position was specified, set it up.\n\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n\n        self._panner = undefined;\n\n        parent._refreshBuffer(self);\n      } // Complete resetting of the sound.\n\n\n      return _super.call(this);\n    };\n  }(Sound.prototype.reset);\n  /** Helper Methods **/\n\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n\n\n  var setupPanner = function setupPanner(sound, type) {\n    type = type || 'spatial'; // Create the new panner node.\n\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node); // Update the connections.\n\n\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();"],"sourceRoot":""}